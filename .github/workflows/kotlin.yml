name : Kotlin CI

on :
  push :
    branches :
      - main
  pull_request :
    paths-ignore :
      # Don't build the entire app when just changing tutorials, which have their own workflow.
      - 'samples/tutorial/**'
  merge_group :
    paths-ignore :
      # Don't build the entire app when just changing tutorials, which have their own workflow.
      - 'samples/tutorial/**'

env :
  GRADLE_OPTS : "-Dorg.gradle.jvmargs=-Xmx5g -Dorg.gradle.daemon=false -Dorg.gradle.logging.stacktrace=all"

# If CI is already running for a branch when that branch is updated, cancel the older jobs.
concurrency:
  group: ci-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs :

  dokka :
    name : Assemble & Dokka
    runs-on : ubuntu-latest
    timeout-minutes : 20
    steps :
      - uses : actions/checkout@v3
      - name : set up JDK 11
        uses : actions/setup-java@v3
        with :
          distribution : 'zulu'
          java-version : 11

      ## Actual task
      - uses : gradle/gradle-build-action@v2
        name : Assemble with gradle â€” make sure everything builds
        with :
          arguments : |
            assemble
          cache-read-only : false

      # This should ideally be done as a Check job below, but it needs to be done as a separate
      # step after running assemble. Heckin' ridikalus.
      # Probably fixed in dokka 1.4.10, but we can't move to kotlin 1.4 yet.
      #  https://github.com/square/workflow/issues/1152.
      - uses : gradle/gradle-build-action@v2
        name : Run dokka to validate kdoc
        with :
          arguments : |
            siteDokka --build-cache
          cache-read-only : false

  # the `artifactsCheck` task has to run on macOS in order to see the iOS KMP artifacts
  artifacts-check :
    name : ArtifactsCheck
    runs-on : macos-latest
    timeout-minutes : 20
    steps :
      - uses : actions/checkout@v3
      - name : set up JDK 11
        uses : actions/setup-java@v3
        with :
          distribution : 'zulu'
          java-version : 11

      ## Actual task
      - uses : gradle/gradle-build-action@v2
        name : check published artifacts
        with :
          arguments : artifactsCheck
          cache-read-only : false

  dependency-guard :
    name : Dependency Guard
    runs-on : ubuntu-latest
    timeout-minutes : 20
    steps :
      - uses : actions/checkout@v3
      - name : set up JDK 11
        uses : actions/setup-java@v3
        with :
          distribution : 'zulu'
          java-version : 11

      # If the PR was made by Renovate, automatically update baselines and push so that no one has
      # to check out the branch and update the baselines manually.
      - name : dependency-guard baseline (used by Renovate)
        if : github.actor == 'renovate[bot]'
        uses : gradle/gradle-build-action@v2
        with :
          arguments : dependencyGuardBaseline
          cache-read-only : false --refresh-dependencies

      # If a non-bot made the pull request, run the non-baseline task which fails on changes.
      - name : dependency-guard check (used by everyone but Renovate)
        if : github.actor != 'renovate[bot]'
        uses : gradle/gradle-build-action@v2
        with :
          arguments : dependencyGuard
          cache-read-only : false --refresh-dependencies

      # If dependency-guard generated changes, commit and push those changes. This relies upon the
      # 'cancel-stale-jobs' job to cancel the rest of the jobs for the now-stale commit.
      - name : commit dependency-guard baseline changes (used by main repo)
        if : github.actor == 'renovate[bot]'
        uses : stefanzweifel/git-auto-commit-action@v4
        with :
          commit_message : update dependency-guard baseline
          commit_options : '--no-verify --signoff'

  # These are all pretty quick so we run them on a single shard. Fewer shards, less queueing.
  check :
    name : Check
    runs-on : ubuntu-latest
    timeout-minutes : 20
    steps :
      - uses : actions/checkout@v3
      - uses : gradle/wrapper-validation-action@v1
      - name : set up JDK 11
        uses : actions/setup-java@v3
        with :
          distribution : 'zulu'
          java-version : 11

      ## Actual task
      - uses : gradle/gradle-build-action@v2
        name : Check with Gradle
        with :
          arguments : |
            allTests test apiCheck checkVersionIsSnapshot lint lintKotlin jvmWorkflowNodeBenchmarkJar --continue
          cache-read-only : false

      # Report as Github Pull Request Check.
      - name : Publish Test Report
        uses : mikepenz/action-junit-report@v3
        if : always() # always run even if the previous step fails
        with :
          report_paths : '**/build/test-results/test/TEST-*.xml'

  tutorials :
    name : Build Tutorials
    runs-on : ubuntu-latest
    timeout-minutes : 15
    steps :
      # These setup steps should be common across all jobs in this workflow.
      - uses : actions/checkout@v3
      - name : set up JDK 11
        uses : actions/setup-java@v3
        with :
          distribution : 'zulu'
          java-version : 11
      - name : build tutorials
        uses : gradle/gradle-build-action@v2
        with :
          arguments : build
          cache-read-only : false
          build-root-directory : samples/tutorial

  jvm-conflate-runtime-test :
    name : Conflate Stale Renderings Runtime JVM Tests
    runs-on : ubuntu-latest
    timeout-minutes : 20
    steps :
      - uses : actions/checkout@v3
      - uses : gradle/wrapper-validation-action@v1
      - name : set up JDK 11
        uses : actions/setup-java@v3
        with :
          distribution : 'zulu'
          java-version : 11

      ## Actual task
      - uses : gradle/gradle-build-action@v2
        name : Check with Gradle
        with :
          arguments : |
            jvmTest --continue -Pworkflow.runtime=conflate
          cache-read-only : false

      # Report as Github Pull Request Check.
      - name : Publish Test Report
        uses : mikepenz/action-junit-report@v3
        if : always() # always run even if the previous step fails
        with :
          report_paths : '**/build/test-results/test/TEST-*.xml'

  jvm-stateChange-runtime-test :
    name : Render On State Change Only Runtime JVM Tests
    runs-on : ubuntu-latest
    timeout-minutes : 20
    steps :
      - uses : actions/checkout@v3
      - uses : gradle/wrapper-validation-action@v1
      - name : set up JDK 11
        uses : actions/setup-java@v3
        with :
          distribution : 'zulu'
          java-version : 11

      ## Actual task
      - uses : gradle/gradle-build-action@v2
        name : Check with Gradle
        with :
          arguments : |
            jvmTest --continue -Pworkflow.runtime=stateChange
          cache-read-only : false

      # Report as Github Pull Request Check.
      - name : Publish Test Report
        uses : mikepenz/action-junit-report@v3
        if : always() # always run even if the previous step fails
        with :
          report_paths : '**/build/test-results/test/TEST-*.xml'

  ios-tests :
    name : iOS Tests
    runs-on : macos-latest
    timeout-minutes : 30
    steps :
      - uses : actions/checkout@v3
      - uses : gradle/wrapper-validation-action@v1
      - name : set up JDK 11
        uses : actions/setup-java@v3
        with :
          distribution : 'zulu'
          java-version : 11

      ## iOS Specific Tests (for KMP ios actuals in core and runtime).
      - uses : gradle/gradle-build-action@v2
        name : Check with Gradle
        with :
          arguments : |
            iosX64Test
          cache-read-only : false

      # Report as Github Pull Request Check.
      - name : Publish Test Report
        uses : mikepenz/action-junit-report@v3
        if : always() # always run even if the previous step fails
        with :
          report_paths : '**/build/test-results/test/TEST-*.xml'

  js-tests :
    name : JS Tests
    runs-on : ubuntu-latest
    timeout-minutes : 20
    steps :
      - uses : actions/checkout@v3
      - uses : gradle/wrapper-validation-action@v1
      - name : set up JDK 11
        uses : actions/setup-java@v3
        with :
          distribution : 'zulu'
          java-version : 11

      ## JS Specific Tests (for KMP js actuals in core and runtime).
      - uses : gradle/gradle-build-action@v2
        name : Check with Gradle
        with :
          arguments : |
            jsTest
          cache-read-only : false

      # Report as Github Pull Request Check.
      - name : Publish Test Report
        uses : mikepenz/action-junit-report@v3
        if : always() # always run even if the previous step fails
        with :
          report_paths : '**/build/test-results/test/TEST-*.xml'

  performance-tests :
    name : Performance tests
    runs-on : macos-latest
    timeout-minutes : 30
    strategy :
      # Allow tests to continue on other devices if they fail on one device.
      fail-fast : false
      matrix :
        api-level :
          - 29
      # Unclear that older versions actually honor command to disable animation.
      # Newer versions are reputed to be too slow: https://github.com/ReactiveCircus/android-emulator-runner/issues/222
    steps :
      - uses : actions/checkout@v3
      - name : set up JDK 11
        uses : actions/setup-java@v3
        with :
          distribution : 'zulu'
          java-version : 11

      ## Build before running tests, using cache.
      - uses : gradle/gradle-build-action@v2
        name : Build instrumented tests
        with :
          arguments : |
            :benchmarks:performance-poetry:complex-poetry:assembleDebugAndroidTest
          cache-read-only : false

      ## Actual task
      - name : Render Pass Counting Test
        uses : reactivecircus/android-emulator-runner@v2
        with :
          # @ychescale9 suspects Galaxy Nexus is the fastest one
          profile : Galaxy Nexus
          api-level : ${{ matrix.api-level }}
          arch : x86_64
          script : ./gradlew :benchmarks:performance-poetry:complex-poetry:connectedCheck --continue

      - name : Upload results
        if : ${{ always() }}
        uses : actions/upload-artifact@v3
        with :
          name : instrumentation-test-results-${{ matrix.api-level }}
          path : ./**/build/reports/androidTests/connected/**

  instrumentation-tests :
    name : Instrumentation tests
    runs-on : macos-latest
    timeout-minutes : 45
    strategy :
      # Allow tests to continue on other devices if they fail on one device.
      fail-fast : false
      matrix :
        api-level :
          - 29
      # Unclear that older versions actually honor command to disable animation.
      # Newer versions are reputed to be too slow: https://github.com/ReactiveCircus/android-emulator-runner/issues/222
    steps :
      - uses : actions/checkout@v3
      - name : set up JDK 11
        uses : actions/setup-java@v3
        with :
          distribution : 'zulu'
          java-version : 11

      ## Build before running tests, using cache.
      - uses : gradle/gradle-build-action@v2
        name : Build instrumented tests
        with :
          arguments : |
            assembleDebugAndroidTest
          cache-read-only : false

      ## Actual task
      - name : Instrumentation Tests
        uses : reactivecircus/android-emulator-runner@v2
        with :
          # @ychescale9 suspects Galaxy Nexus is the fastest one
          profile : Galaxy Nexus
          api-level : ${{ matrix.api-level }}
          arch : x86_64
          # Skip the benchmarks as this is running on emulators
          script : ./gradlew connectedCheck -x :benchmarks:dungeon-benchmark:connectedCheck -x :benchmarks:performance-poetry:complex-benchmark:connectedCheck -x :benchmarks:performance-poetry:complex-poetry:connectedCheck

      - name : Upload results
        if : ${{ always() }}
        uses : actions/upload-artifact@v3
        with :
          name : instrumentation-test-results-${{ matrix.api-level }}
          path : ./**/build/reports/androidTests/connected/**

  conflate-renderings-instrumentation-tests :
    name : Conflate Stale Renderings Instrumentation tests
    runs-on : macos-latest
    timeout-minutes : 45
    strategy :
      # Allow tests to continue on other devices if they fail on one device.
      fail-fast : false
      matrix :
        api-level :
          - 29
      # Unclear that older versions actually honor command to disable animation.
      # Newer versions are reputed to be too slow: https://github.com/ReactiveCircus/android-emulator-runner/issues/222
    steps :
      - uses : actions/checkout@v3
      - name : set up JDK 11
        uses : actions/setup-java@v3
        with :
          distribution : 'zulu'
          java-version : 11

      ## Build before running tests, using cache.
      - uses : gradle/gradle-build-action@v2
        name : Build instrumented tests
        with :
          # Unfortunately I don't think we can key this cache based on our project property so
          # we clean and rebuild.
          arguments : |
            clean assembleDebugAndroidTest -Pworkflow.runtime=conflate
          cache-read-only : false

      ## Actual task
      - name : Instrumentation Tests
        uses : reactivecircus/android-emulator-runner@v2
        with :
          # @ychescale9 suspects Galaxy Nexus is the fastest one
          profile : Galaxy Nexus
          api-level : ${{ matrix.api-level }}
          arch : x86_64
          # Skip the benchmarks as this is running on emulators
          script : ./gradlew connectedCheck -x :benchmarks:dungeon-benchmark:connectedCheck -x :benchmarks:performance-poetry:complex-benchmark:connectedCheck -x :benchmarks:performance-poetry:complex-poetry:connectedCheck -Pworkflow.runtime=conflate

      - name : Upload results
        if : ${{ always() }}
        uses : actions/upload-artifact@v3
        with :
          name : instrumentation-test-results-${{ matrix.api-level }}
          path : ./**/build/reports/androidTests/connected/**

  stateChange-runtime-instrumentation-tests :
    name : Render on State Change Only Instrumentation tests
    runs-on : macos-latest
    timeout-minutes : 45
    strategy :
      # Allow tests to continue on other devices if they fail on one device.
      fail-fast : false
      matrix :
        api-level :
          - 29
      # Unclear that older versions actually honor command to disable animation.
      # Newer versions are reputed to be too slow: https://github.com/ReactiveCircus/android-emulator-runner/issues/222
    steps :
      - uses : actions/checkout@v3
      - name : set up JDK 11
        uses : actions/setup-java@v3
        with :
          distribution : 'zulu'
          java-version : 11

      ## Build before running tests, using cache.
      - uses : gradle/gradle-build-action@v2
        name : Build instrumented tests
        with :
          # Unfortunately I don't think we can key this cache based on our project property so
          # we clean and rebuild.
          arguments : |
            clean assembleDebugAndroidTest -Pworkflow.runtime=stateChange
          cache-read-only : false

      ## Actual task
      - name : Instrumentation Tests
        uses : reactivecircus/android-emulator-runner@v2
        with :
          # @ychescale9 suspects Galaxy Nexus is the fastest one
          profile : Galaxy Nexus
          api-level : ${{ matrix.api-level }}
          arch : x86_64
          # Skip the benchmarks as this is running on emulators
          script : ./gradlew connectedCheck -x :benchmarks:dungeon-benchmark:connectedCheck -x :benchmarks:performance-poetry:complex-benchmark:connectedCheck -x :benchmarks:performance-poetry:complex-poetry:connectedCheck -Pworkflow.runtime=stateChange

      - name : Upload results
        if : ${{ always() }}
        uses : actions/upload-artifact@v3
        with :
          name : instrumentation-test-results-${{ matrix.api-level }}
          path : ./**/build/reports/androidTests/connected/**

  upload-to-mobiledev :
    name : mobile.dev | Build & Upload
    runs-on : ubuntu-latest
    timeout-minutes : 20
    steps :
      - uses : actions/checkout@v3

      - name : set up JDK 11
        if : env.MOBILE_DEV_API_KEY != null
        uses : actions/setup-java@v3
        with :
          distribution : 'zulu'
          java-version : 11
        env :
          MOBILE_DEV_API_KEY : ${{ secrets.MOBILE_DEV_API_KEY }}


      ## Build artifact for upload with cache
      - uses : gradle/gradle-build-action@v2
        name : Build Performance Poetry APK
        if : env.MOBILE_DEV_API_KEY != null
        with :
          arguments : |
            benchmarks:performance-poetry:complex-poetry:assembleRelease
          cache-read-only : false
        env :
          MOBILE_DEV_API_KEY : ${{ secrets.MOBILE_DEV_API_KEY }}

      ## Upload with POST
      - name : Upload Poetry to mobile.dev
        if : env.MOBILE_DEV_API_KEY != null
        id : upload_apk
        run : |
          #!/usr/bin/env bash
          set -e
          set -x
          RESPONSE_ID=$(curl -X POST \
            -H 'Content-Type: multipart/form-data' \
            -H "Authorization: Bearer $MOBILE_DEV_API_KEY" \
            --data-binary "@$APP_FILE" \
            https://api.mobile.dev/apk | jq -r .id)
          echo "::set-output name=apk_id::$RESPONSE_ID"
        env :
          MOBILE_DEV_API_KEY : ${{ secrets.MOBILE_DEV_API_KEY }}
          APP_FILE : benchmarks/performance-poetry/complex-poetry/build/outputs/apk/release/complex-poetry-release.apk

      ## Start analysis
      - name : Start analysis on mobile.dev
        if : env.MOBILE_DEV_API_KEY != null
        run : |
          #!/usr/bin/env bash
          set -e
          set -x
          GIT_HASH=$(git log --pretty=format:'%h' -n 1)
          BENCHMARK_NAME="$GIT_HASH"
          REPO_BASE_NAME=$(basename "$REPO_NAME")
          if [[ ! -z "$PULL_REQUEST_ID" ]]; then
            PR_DATA=", \"repoOwner\":\"$REPO_OWNER\", \"repoName\":\"$REPO_BASE_NAME\", \"pullRequestId\":\"$PULL_REQUEST_ID\""
          fi
          curl -X POST \
           -H "Content-Type: application/json" \
           -H "Authorization: Bearer $MOBILE_DEV_API_KEY" \
           https://api.mobile.dev/analysis \
           --data "{\"benchmarkName\": \"$BENCHMARK_NAME\", \"apkId\": \"$APP_ID\", \"branch\": \"$BRANCH_NAME\"$PR_DATA}"
        env :
          APP_ID : ${{ steps.upload_apk.outputs.apk_id }}
          MOBILE_DEV_API_KEY : ${{ secrets.MOBILE_DEV_API_KEY }}
          REPO_OWNER : ${{ github.repository_owner }}
          REPO_NAME : ${{ github.repository }}
          BRANCH_NAME : ${{ github.head_ref || github.ref_name }}
          PULL_REQUEST_ID : ${{ github.event.pull_request.number }}

  all-green :
    if : always()
    runs-on : ubuntu-latest
    needs :
      - artifacts-check
      - check
      - conflate-renderings-instrumentation-tests
      - dependency-guard
      - dokka
      - instrumentation-tests
      - ios-tests
      - js-tests
      - jvm-conflate-runtime-test
      - performance-tests
      - tutorials
      - upload-to-mobiledev

    steps :
      - name : require that all other jobs have passed
        uses : re-actors/alls-green@release/v1
        with :
          jobs : ${{ toJSON(needs) }}
